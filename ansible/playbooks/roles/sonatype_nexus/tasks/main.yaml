---
# Create user "nexus" (as the superuser you execute this playbook with.)

- name: Create user to run Nexus with.
  user:
    name: "{{ nexus_user }}"
    create_home: yes
    shell: /bin/bash
    system: yes
    home: /opt/nexus
    state: present
  register: nexus_user_rv
  become: true

# Setup JRE8. https://help.sonatype.com/repomanager3/product-information/system-requirements

- name: Import role "sdkman" to install a JDK version.
  ansible.builtin.import_role:
    name: sdkman
  vars:
    user: "{{ nexus_user_rv }}"

- name: Install a JDK version with SDKMan.
  ansible.builtin.shell: source {{ nexus_user_rv.home }}/.profile && sdk update && sdk install java {{ jdk_version }}
  args:
    executable: /bin/bash
  become: true
  become_user: "{{ nexus_user }}"
  become_flags: "--login"
  when: jdk_version is defined

# Setup RAM settings according to hardware spec. https://help.sonatype.com/repomanager3/product-information/system-requirements

- name: Fetch Sonatype Nexus package.
  ansible.builtin.unarchive:
    src: "{{ nexus_fetch_url }}"
    dest: "{{ nexus_user_rv.home }}"
    remote_src: yes
    creates: nexus-{{ nexus_version }}
  become: true
  become_user: "{{ nexus_user }}"

- name: Configure Sonatype Nexus package.
  ansible.builtin.lineinfile:
    path: "{{ nexus_user_rv.home }}/nexus-{{ nexus_version }}/bin/nexus.rc"
    line: run_as_user="{{ nexus_user }}"
  become: true
  become_user: "{{ nexus_user }}"

# Configure the runtime environment. https://help.sonatype.com/repomanager3/installation-and-upgrades/configuring-the-runtime-environment



# Setup the systemd service file. https://help.sonatype.com/repomanager3/installation-and-upgrades/run-as-a-service

- name: Symlink Sonatype Nexus executables to /etc/init.d.
  ansible.builtin.file:
    src: "{{ nexus_user_rv.home }}/nexus-{{ nexus_version }}/bin/nexus"
    dest: /etc/init.d/nexus
    owner: "{{ nexus_user }}"
    group: "{{ nexus_user }}"
    state: link
  become: true

- name: Configure Sonatype Nexus service for systemd.
  ansible.builtin.copy:
    src: nexus.service # local file within this folder's files dir.
    dest: /etc/systemd/system/
    owner: "{{ nexus_user }}"
    group: "{{ nexus_user }}"
  become: true

- name: Activate and start the Sonatype Nexus service.
  ansible.builtin.systemd:
    daemon_reload: yes
    enabled: yes
    state: started
    name: nexus
  become: true

# Setup the webserver as reverse proxy for Nexus.

- name: Copy Nginx conf to Nexus user home.
  ansible.builtin.copy:
    src: nexus.conf # local file within this folder's files dir.
    dest: "{{ nexus_user_rv.home }}/nginx/"
    owner: "{{ nexus_user }}"
    group: "{{ nexus_user }}"
  become: true
  become_user: "{{ nexus_user }}"

- name: Import role "webserver_nginx" to setup Nexus behind a reverse proxy.
  ansible.builtin.import_role:
    name: webserver_nginx
  vars:
    user: "{{ nexus_user_rv }}"

- name: Link Nginx conf from Nexus user home to Nginx server conf.
  ansible.builtin.file:
    src: "{{ nexus_user_rv.home }}/nginx/nexus.conf"
    dest: /etc/nginx/conf.d/nexus.conf
    owner: "{{ nexus_user }}"
    group: "{{ nexus_user }}"
    state: link
  become: true

- name: Reload Nginx.
  ansible.builtin.systemd:
    enabled: yes
    state: reloaded
    name: nginx
  become: true
...